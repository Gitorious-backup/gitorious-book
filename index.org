#+TITLE:     The Gitorious Book
#+EMAIL:     support@gitorious.org
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS: H:3 num:nil toc:t @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+XSLT:

#+BEGIN_HTML
<p><strong>31st October 2012: This is the new, official Gitorious
 documentation and is a work in progress.</strong> New content will
 arrive here gradually. In the meantime, please seek out the <a
 href="http://gitorious.org/gitorious/pages/Home">project wiki</a> or
 the Gitorious <a
 href="http://groups.google.com/group/gitorious?hl=en">Google
 group</a> for documentation and troubleshooting.</p>
#+END_HTML

* TODO Introduction
** History
** Features & benefits
** FOSS licensing
** Current maintainers
** Funding
* TODO How Gitorious works
** Overview: services, processes, packages
** How the web frontend works
   Briefly describe Rails/web architecture
** How the git backend works
File structure, how we handle incoming ssh/git operations, the gitorious script
* TODO Installation
** Automated installation
** Manual installation
*** Overview - common steps

*** CentOS / RHEL
*** Debian / Ubuntu
** Case study: Gitorious.org
   Read about the [[file:gitorious-org-setup.org::*The%20setup%20on%20gitorious.org][The setup on gitorious.org]]
* TODO Using the web frontend
** Registering your user
** Adding your ssh key
** Creating your first project and repo
** Using Gitorious as a git remote
** Collaborating with others: merge requests
* Upgrades
** Versioning

As of July 7th 2011, Gitorious adopted a standard versioning scheme,
and the initial version was 2.0.0. This version was chosen
arbitrarily, but we chose 2 over 1 to reflect the fact that Gitorious
has been through a few major changes since its inception, and we've
had been around for almost 4 years at that point.

Below you can read about the types of changes and what they demand
from someone upgrading Gitorious. The changes are listed in order of
most to least frequent. Releases are available as tags of the form
“vx.y.z” in the Gitorious mainline repository.

*** Risks of upgrading

We will do our best to keep releases stable. Every release will be run
in production on gitorious.org prior to being tagged.

*** Patch versions

Patch versions indicate changes with minor impact for installs. In
general, the rules for patch versions are:

- Should not require database migrations
- Should not require configuration changes or additions
- Should not require changes in CSS (e.g. by changing existing markup)

In general: If you have a local install, you should be able to safely
upgrade patch releases without changing anything, even if you have
local CSS adjustments.

Because of these restrictions, patch upgrades should be considered
fairly trivial and of minimal risk. Refer to Upgrading for information
on checking your current version and upgrading.

*** Minor versions

Minor versions are bigger changes or changes that require action on
your part other than simply pulling from Git and restarting your
app. These changes may include:

- Database migrations
- Required configuration changes and/or additions
- Substantial changes/additions to the view
- API changes in models and key lib classes

Each minor version will receive its own entry in the documentation
chapter you're currently reading.

*** Major versions

Major versions will presumably occur infrequently, and there is no
specific rules to trigger an upgrade. Our rule of thumb right now is
that if a new version of Gitorious requires an entirely new
installation guide of its own, it’s probably a major release. However,
we may also up the major version number due to the addition of
substantial new features, redesigns and whatnot.

*** How often/when will Gitorious update its version?

Releases will be made on an irregular schedule, and will coincide with
gitorious.org deployments, but not in a 1:1 ratio. Occasionally we
deploy Gitorious a number of times throughout a single week, but do
not expect more than one version per week. Follow this page, or better
– the mailing list for updates.

** Approach 1: Manual upgrade

If your version of Gitorious is really old, please start with this
guide: [[https://gitorious.org/gitorious/pages/LegacyUpgrade][LegacyUpgrade]] ("really old" = older than February 3rd
2009/92bb70a1).

If your version Gitorious is only a little old, refer to [[https://gitorious.org/gitorious/pages/BundlerSetup][BundlerSetup]]
("a little old" = older than January 24th 2011/c44237f).

**** The changelog tool

As of Gitorious 2.0.0, Gitorious ships with a simple changelog
tool. The tool consists of a single rake task that can tell you what
version you are currently on and what versions are available to
you. To use it, invoke the following command from the root of your
installation:

=bundle exec rake changelog=

The tool will give you a list of available version along with an arrow
indicating your current version. If the arrow points to a green
number, you're on top of things. If it points to a red number, it
means that upgrades are available, and you are encouraged to stay up
to date.

To display a changelog for changes between your current version and
another version, run the tool with the `VERSION` environment variable
set:

#+begin_src shell
bundle exec rake changelog VERSION=2.0.1
#+end_src

**** Before upgrading

No matter how simple an upgrade may look, we strongly encourage you to
always back up your database and repository data prior to upgrades. If
nothing else, an upgrade is a good time to get some snapshots if you
don't already have scheduled backups of your system. It's also a good
idea to keep a copy of Gitorious configuration files outside the
actual install.

**** Upgrading patch versions

Patch upgrades should be trivial in nature. The steps are simple:

#+begin_src shell
cd /path/to/gitorious
git fetch git://gitorious.org/gitorious/mainline.git
git merge v2.x.y
rake assets:clear
#+end_src

Note that `rake assets:clear` was not available prior to 2.1.0. 2.0.x
can be directly upgraded to 2.1.0, see below.

As of 2.1.0 you also need these steps for any upgrade:

#+begin_src shell
git submodule init
git submodule update
rake db:migrate
#+end_src

Finally, restart all services. This includes the webserver, the poller
and the git daemon. x/y depends on the actual version.

**** Upgrading customized installs

If your Gitorious setup has changes, you may experience conflicts when
pulling in changes. It is recommended to push your patched version of
Gitorious somewhere, for example to itself, so you can easily clone
Gitorious to a local machine, or somewhere else on the server to make
sure that the patch will apply cleanly before attempting the upgrade.

**** Sample upgrade

Assuming you are on v2.0.0 or newer:

#+begin_src shell
bundle exec rake changelog
Available versions
v2.0.1              Next increment
-> v2.0.0           First versioned version of Gitorious
#+end_src

Obviously, there's a new version in town, so let's see what it offers:

#+begin_src shell
bundle exec rake changelog VERSION=2.0.1
Changes between v2.0.0 and v2.0.1:
A longer description appears here
#+end_src

This looks good, so let's upgrade:

#+begin_src shell
git fetch git://gitorious.org/gitorious/mainline.git
git merge v2.0.0
rm public/stylesheets/all.css public/javascripts/all.js public/javascripts/capillary.js public/**/*/gts-*.*
touch tmp/restart.txt
#+end_src

**** Upgrading from 2.0.x to 2.1

You can upgrade directly from any 2.0.x version directly to 2.1.0. Start by reviewing changes:

#+begin_src shell
bundle exec rake changelog VERSION=2.1.0
#+end_src

If this looks good, back up everything (see above), and get started:

#+begin_src shell
git fetch git://gitorious.org/gitorious/mainline.git
git merge v2.1.0
rake assets:clear
#+end_src

Gitorious now has submodules. Initialize and pull them, then upgrade
the database.

#+begin_src shell
git submodule init
git submodule update
rake db:migrate
#+end_src

Then restart your server (assuming you're using Passenger):

#+begin_src shell
touch tmp/restart.txt
#+end_src

**** Upgrading from 2.1.x to 2.2

You can upgrade directly from any 2.1.x version directly to 2.2.0. Start by reviewing changes:

#+begin_src shell
bundle exec rake changelog VERSION=2.2.0
#+end_src

If this looks good, back up everything (see above), and get started:

#+begin_src shell
git fetch git://gitorious.org/gitorious/mainline.git
git merge v2.2.0
rake assets:clear
git submodule --init update
#+end_src

Upgrade the database:

#+begin_src shell
rake db:migrate
#+end_src

Then restart your server (assuming you're using Passenger):

#+begin_src shell
touch tmp/restart.txt
#+end_src

If you want to use the new [[private repositories
 feature][https://gitorious.org/gitorious/pages/PrivateRepositories]], set the
=enable_private_repositories= setting to `true` in
config/gitorious.yml. See the sample configuration in
config/gitorious.sample.yml for more information.

**** Upgrading from 2.2.x to 2.3

You can upgrade directly from any 2.2.x version directly to 2.3.0. Start by reviewing changes:

#+begin_src shell
bundle exec rake changelog VERSION=2.3.0
#+end_src

If this looks good, back up everything (see above), and get started:

#+begin_src shell
git fetch git://gitorious.org/gitorious/mainline.git
git merge v2.3.0
rake assets:clear
#+end_src

Gitorious now has submodules. Initialize and pull them:

#+begin_src shell
git submodule init
git submodule update
#+end_src

Upgrade the database:

#+begin_src shell
rake db:migrate
#+end_src

Then restart your server (assuming you're using Passenger):

#+begin_src shell
touch tmp/restart.txt
#+end_src

**** Upgrading from 2.3.0 to 2.3.1

To upgrade from version 2.3.0 to 2.3.1, follow these steps:

#+begin_src shell
git fetch git://gitorious.org/gitorious/mainline.git
git merge v2.3.1
bundle install
rake assets:clear
touch tmp/restart.txt
#+end_src
**** Upgrading from 2.3.1 to 2.3.2

To upgrade from version 2.3.1 to 2.3.2, follow these steps:

#+begin_src shell
git fetch git://gitorious.org/gitorious/mainline.git
git merge v2.3.2
bundle install
rake assets:clear
touch tmp/restart.txt
#+end_src

**** Upgrading from 2.3.2 to 2.4.1

To upgrade from version 2.3.2 to 2.4.1, follow these steps:

#+begin_src shell
git fetch git://gitorious.org/gitorious/mainline.git
git merge v2.4.1
bundle install
rake assets:clear
rake db:migrate
rake ts:rebuild
touch tmp/restart.txt
#+end_src

**** Upgrading patch releases in the 2.4 series

Due to our use of git-flow there have been a few patch releases in the
2.4 series. To upgrade between these:

#+begin_src shell
git fetch git://gitorious.org/gitorious/mainline.git
git merge v2.4.x
bundle install
rake assets:clear
rake db:migrate
rake ts:rebuild
touch tmp/restart.txt
#+end_src

** Approach 2: Snapshot old instance, restore state in a newly installed instance

The nuclear option, and the simplest way to go in some cases. If you
need to make a major version leap (aka. migrating an ancient Gitorious
installation) you might want to consider simply snapshotting the old
one and recovering in a freshly installed new one. This also has the
benefit of not screwing up your older, working installation if
something goes wrong.

(See the backup/recovery chapter below)

* TODO Authentication & authorization
** LDAP integration
** Private projects/repositories
* TODO Keeping it running
** Monit
** Diagnostic checks
* Backup, recovery, migration, cloning

Gitorious has support for snapshotting and restoring its state, which
makes it possible to easily perform backups, disaster recovery,
cloning and migration of Gitorious sites.

** Using the snapshot/restore commands

If you're on a recent version of Gitorious (>v2.3.0) you'll find two
commands under the scripts directory: scripts/snapshot and
scripts/restore. Each of them takes a single parameter: the path of
the tar file you want your Gitorious installation backed up to, or
restored from. Note that you'll need to launch the commands from the
root directory of your Gitorious install (the directory where you find
your Rakefile, Gemfile, config directory etc).

** How to perform snapshots in older Gitorious versions

It's fairly straightforward to add these new snapshot|restore commands
to an older Gitorious instance a well: you only need to clone the
latest version of the Gitorious code, and copy the following files to
the same locations in your current, older installation:

=script/restore=
=script/snapshot=
=lib/tasks/backup.rake=

** Assumptions and caveats

- For disaster recovery, you'll first need to get a functional
  installation of Gitorious up and running, after which you can run
  the restore command to bring in your data again. Note that the
  snapshot tarball also includes the configuration files from your old
  Gitorious installation. They are not automatically copied into your
  new installation, but can be used to recreate your old config in
  your new Gitorious installation (useful if your previous Gitorious
  installation had custom LDAP integration, custom hooks etc).

- Snapshots will not preserve any custom code or theming you may have
  added to your Gitorious installation: any such local modifications
  will need to be backed up and restored separately

- Some operations in Gitorious are asynchronous, meaning they are
  performed by publishing/consuming messages on a queue. The
  snapshot/restore commands don't currently capture or restore the
  state of the queue, so any current work on the queue will be lost.

- The snapshot/recovery commands assume that you have the time and
  disk-space to slurp down all your hosted repos into a local
  tarball. Sites with huge amounts of git repository data may
  therefore need more custom backup schemes.

- The restore command assumes that no breaking changes have happened
  between the version you snapshot from, and the version you restore
  your data into. In the future, major Gitorious version jumps may
  necessitate a more manual restore procedure due to changes in
  configurations, db schema, folder structure etc.

** Scenarios

The snapshot|restore commands are useful for multiple tasks beyond
just standard backups.

*** Backup and disaster recovery

Run periodic backups, for instance via cron. Execute the snapshot
command, for example like this script/snapshot
/tmp/todays-snapshot.tar. Transfer the newly created tarball to
another server, offsite location or something like Amazon S3.

If disaster strikes on your Gitorious installation, install a new
instance of Gitorious, then run script/restore todays-snapshot.tar to
restore your old state in the new installation.

*** Migrations and clones

The same procedure is useful if you just need to move or clone your
Gitorious state from one server to another. Snapshot the old one, copy
the tarball file over to the other installation and restore
there. Simple.

*** Upgrading

Different scenario, same procedure: if you need to upgrade from an
older version of Gitorious and don't want to bother with carefully
upgrading your Gitorious instance across multiple versions, you can
simply snapshot the state of your old Gitorious site, install a fresh
new Gitorious instance and just restore your state there.

*** Snapshots and rollbacks for development and testing

If you're a developer extending, customizing or developing new
features for Gitorious, you can use the snapshot|restore commands to
simply setting up and restoring multiple standard database/repository
states in order to simplify testing.

* TODO Scaling
** Caching with Varnish
** Horizontal scaling
   what sort of hardware will you need to keep a single server running
   under misc typical usage scenarios?
** Vertical scaling
   distributing the load over multiple serves
** Repository hashing/sharding

* Troubleshooting

You're running your own Gitorious site. Now something seems to be
broken. Where do you start?

** Diagnostics CLI tool

Gitorious includes a self-diagnostic tool (available in v2.3.0 and
onwards).

Execute scripts/diagnose (as superuser/root), and Gitorious will print
out a summary of its internals. Obvious problems in your setup will
show up here, which should give you a clue as to what could be amiss
in your installation.

** Diagnostics dashboard url

You can also check the health of the site via the web frontend. If you
are a site admin, browse to /admin/diagnostics at your Gitorious
site. You'll be greeted with a diagnostics summary very similar to the
script/diagnose command.

** Check the FAQ

(See FAQ chapter below)

** Ask the community

If you're still stuck, consider asking the Gitorious community for
suggestions.

The core contributors and quite a few community members subscribe to
the [[http://groups.google.com/group/gitorious?hl=en][Gitorious Google Group]]. There's also an IRC channel
available: #gitorious at freenode.net

Finally, if you are considering paid support/help, note that [[http://gitorious.com][Gitorious
AS]] offers commercial support.

* TODO Frequently Asked Questions
* Contributing to Gitorious
** Bug reports

Found a bug or annoyance? Please let the maintainers know via the official
issuetracker at [[https://issues.gitorious.org/][https://issues.gitorious.org/]].

** Hacking on Gitorious
*** TODO Setting up your development environment

Howto: Set up enough dependencies and code locally to run the Gitorious test suite.

*** TODO Deploying and testing your code in a "cleanroom" VM

Howto: Deploy and test your code in a basic gitorious community edition VM

*** Coding styleguide

As Gitorious is a codebase of decent size (by Ruby standards at
least), we try to adhere to a few guidelines to keep the codebase
clean.

The number one takeaway is that there's some level of flexibility in
the "rules" outlined below, but the most important thing is that your
code _should look good_ and be easily _readable_ and _understandable_
for everyone else. The Gitorious codebase has its dark corners,
possibly filled with dragons, but we try to improve things as we see
them. "Leave the source in a better state than you found it" is solid
advice.

Pay attention to what you commit; always review pending changes with
`git diff --staged` and look for things that violates the outlines
below (git is being helpful and highlights some things, such as
trailing whitespace).

In general, try to follow the style of the existing code, and pay
attention to how the code you're writing _actually looks_, not just
how it works.

**** General Guidelines

- Lines should stay below 80 chars or so.
- No tabs.
- Don't get too clever.
- No trailing whitespace

**** Ruby

Generally the points in Christian Neukirchens
[[RUBY-STYLE][http://github.com/chneukirchen/styleguide/raw/master/RUBY-STYLE]] apply.

**** Javascript

- 4 spaces, no tabs
- 80 chars or less line length
- Local variables must use the `var` keyword
- Use (one) blank line to group statements together where suited
- Always use a single space after a keyword, and before a curly brace.
- Curly braces goes on the same line

#+begin_src javascript
    // Wrong
    function foo (arg){
    // Wrong
    function foo(arg)
    {
    // Correct
    function foo(arg) {
#+end_src


The same applies for conditionals:

#+begin_src javascript
    // Wrong
    if (arg){
    // Wrong
    if(arg)
    {
    // Correct
    if foo(arg) {
        ...
    } else {
        ...
    }
#+end_src

One possible exception to the above is if the conditionals argument is
wrapped on multiple lines, the brace can be placed on a new line to
ease readability of the conditional body:

#+begin_src javascript
     if ((foo && barIsJustAWordUsedforDemonstrations) ||
         kittensAreFluffy && doesNotSayWoof)
     {
         ...
     }
#+end_src

However, long boolean expressions should be avoided in the first place.

**** CSS

- four space indent
- no tabs
- multiple selectors on seperate lines, unless singleworded

#+begin_src css
     /* wrong */
    \#foo #bar div.foo, #baz p#quux span.foo {
        ...
    }
    /* Correct */
    \#foo #bar div.foo,
    \#baz p#quux span.foo {
        ...
    }
#+end_src


- Opening brace on the same line as the selector

**** HTML

- 2 spaces indendation
- No tabs
- Prefer to indent deep nesting on a newline+indent, so the structure is easier to follow

*** Branching model

Gitorious uses
[the git-flow branching model](http://nvie.com/posts/a-successful-git-branching-model/)
for branching. This means that the master branch is stable, and is
only merged to once a feature has been completed.

New features are created in feature branches (named `feature/$name`)
and then merged into the `next` branch once finished. Such features
arrive in `master` as new releases.

When contributing new features into Gitorious as merge requests, these
should be started the `next` branch, and marked as such when proposed.

The exception to this is hotfixes, which may be started from and
proposed merged into `master`. Please note that hotfixes should not
implement new functionality.

** Don't have time yourself? Fund new features!

If your company has urgent need of new features/modifications in
Gitorious, please get in touch with the core contributors via
team@gitorious.org for funding development of your proposed features.

* TODO Need more help?
** Google Group
** #gitorious on IRC
** Gitorious AS services & products

* TODO Feedback
